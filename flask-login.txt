from flask_login import UserMixin, login_user, logout_user, login_required, current_user

class User(UserMixin):
    def __init__(self, id, username, password):
        self.id = id
        self.username = username
        self.password = password

@login_manager.user_loader
def load_user(user_id):
    # Busca o usuário no banco de dados pelo seu ID e retorna um objeto de usuário
    user = get_user_from_database(user_id)
    return user




from flask import Flask
from flask_login import LoginManager
from flask_session import Session

app = Flask(__name__)
app.secret_key = 'some_secret_key'

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# Configura o flask_session para usar o sistema de arquivos como armazenamento de sessão
app.config['SESSION_TYPE'] = 'filesystem'
Session(app)

\





@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    # Verifica se o usuário existe no banco de dados e se a senha está correta
    user = get_user_from_database(username, password)
    if user:
        # Faz o login do usuário e salva seu ID na sessão
        login_user(user)
        session['user_id'] = user.id
        return jsonify({'data': True})
    else:
        return jsonify({'data': False})

@app.route('/logout')
@login_required
def logout():
    # Faz o logout do usuário e remove seu ID da sessão
    logout_user()
    session.pop('user_id', None)
    return 'Você foi desconectado. <a href="/">Página inicial</a>.'

@app.route('/profile')
@login_required
def profile():
    # Acessa o usuário atual e seus dados da sessão
    user = current_user
    user_id = session.get('user_id')
    return f'Olá, {user.username}. Seu ID é {user_id}.'





import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Switch, Route, Redirect, useHistory } from 'react-router-dom';
import Login from './Login';
import Home from './Home';
import Profile from './Profile';

function App() {
  const [authed, setAuthed] = useState(false);
  const history = useHistory();

  useEffect(() => {
    // Faz uma requisição ao servidor para verificar se o usuário está logado
    fetch('/_loggedin')
      .then(res => res.json())
      .then(data => {
        // Se o usuário está logado, atualiza o estado e redireciona para a página inicial
        if (data.isLogged) {
          setAuthed(true);
          history.push('/');
        // Se o usuário não está logado, redireciona para a página de login
        } else {
          history.push('/login');
        }
      });
  }, []);

  return (
    <Router>
      <Switch>
        <Route path="/login">
          <Login />
        </Route>
        <PrivateRoute authed={authed} path="/" component={Home} />
        <PrivateRoute authed={authed} path="/profile" component={Profile} />
      </Switch>
    </Router>
  );
}

// Um componente que verifica se o usuário está autenticado antes de renderizar a rota
function PrivateRoute({ authed, component: Component, ...rest }) {
  return (
    <Route
      {...rest}
      render={(props) => authed === true
        ? <Component {...props} />
        : <Redirect to={{pathname: '/login', state: {from: props.location}}} />}
    />
  )
}

export default App;
